{
	"info": {
		"_postman_id": "e55dffcb-406d-4a7f-a1fa-82a48c938a94",
		"name": "OMDbApi",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41477370"
	},
	"item": [
		{
			"name": "Title",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Fixed reference error by defining jsonData",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code este 200\", () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Titlul filmului este corect\", () => {",
							"  pm.expect(jsonData.Title).to.eql(\"Titanic\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://www.omdbapi.com/?apikey=d0236222&t=Titanic",
					"protocol": "http",
					"host": [
						"www",
						"omdbapi",
						"com"
					],
					"path": [
						""
					],
					"query": [
						{
							"key": "apikey",
							"value": "d0236222"
						},
						{
							"key": "t",
							"value": "Titanic"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Invalid API Key",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 401\", function () {",
							"    pm.expect(pm.response.code).to.equal(401);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.Response).to.exist;",
							"    pm.expect(responseData.Error).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Verify the api KEY\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.Response).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Response should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Error is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.Error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://www.omdbapi.com/?apikey=d0236226&t=Titanic",
					"protocol": "http",
					"host": [
						"www",
						"omdbapi",
						"com"
					],
					"path": [
						""
					],
					"query": [
						{
							"key": "apikey",
							"value": "d0236226"
						},
						{
							"key": "t",
							"value": "Titanic"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"pm.test(\"id is tt1285016\", function () {",
							"  const responseData = pm.response.json();",
							"  pm.expect(responseData.imdbID).to.eql(\"tt1285016\");",
							"});",
							"",
							"pm.test(\"Response contains all required fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    const requiredFields = [",
							"        \"Title\", \"Year\", \"Rated\", \"Released\", \"Runtime\", \"Genre\", \"Director\", \"Writer\", \"Actors\", ",
							"        \"Plot\", \"Language\", \"Country\", \"Awards\", \"Poster\", \"Ratings\", \"Metascore\", \"imdbRating\", ",
							"        \"imdbVotes\", \"imdbID\", \"Type\", \"DVD\", \"BoxOffice\", \"Production\", \"Website\", \"Response\"",
							"    ];",
							"",
							"    requiredFields.forEach(field => {",
							"        pm.expect(responseData).to.have.property(field);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Ratings array is present and contains expected number of elements\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.Ratings).to.exist.and.to.be.an('array');",
							"    pm.expect(responseData.Ratings).to.have.lengthOf(1);",
							"});",
							"",
							"",
							"pm.test(\"Source and Value properties exist in Ratings array\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.Ratings).to.be.an('array').that.is.not.empty;",
							"    responseData.Ratings.forEach(function(rating) {",
							"        pm.expect(rating).to.have.property('Source');",
							"        pm.expect(rating).to.have.property('Value');",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://www.omdbapi.com/?apikey=d0236222&i=tt1285016",
					"protocol": "http",
					"host": [
						"www",
						"omdbapi",
						"com"
					],
					"path": [
						""
					],
					"query": [
						{
							"key": "apikey",
							"value": "d0236222"
						},
						{
							"key": "i",
							"value": "tt1285016"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "title&year",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code este 200\", () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Titlul filmului este corect\", () => {",
							"  pm.expect(jsonData.Title).to.eql(\"Avatar\");",
							"});",
							"",
							"pm.test(\"Anul filmului este ”2009\", () => {",
							"  pm.expect(jsonData.Year).to.eql(\"2009\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://www.omdbapi.com/?apikey=d0236222&t=Avatar&y=2009",
					"protocol": "http",
					"host": [
						"www",
						"omdbapi",
						"com"
					],
					"path": [
						""
					],
					"query": [
						{
							"key": "apikey",
							"value": "d0236222"
						},
						{
							"key": "t",
							"value": "Avatar"
						},
						{
							"key": "y",
							"value": "2009"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "poster",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is image/jpeg\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"image/jpeg\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body is not empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.not.be.null;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body is in the expected format for an image\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"image/jpeg\");\r",
							"    pm.expect(pm.response.text()).to.equal(\"\"); // Checking for empty response body\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://img.omdbapi.com/?apikey=d0236222&i=tt0120338",
					"protocol": "http",
					"host": [
						"img",
						"omdbapi",
						"com"
					],
					"path": [
						""
					],
					"query": [
						{
							"key": "apikey",
							"value": "d0236222"
						},
						{
							"key": "i",
							"value": "tt0120338"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "new movie",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.all.keys(",
							"        'Title', 'Year', 'Rated', 'Released', 'Runtime', 'Genre', 'Director', ",
							"        'Writer', 'Actors', 'Plot', 'Language', 'Country', 'Awards', 'Poster', ",
							"        'Ratings', 'Metascore', 'imdbRating', 'imdbVotes', 'imdbID', 'Type', ",
							"        'DVD', 'BoxOffice', 'Production', 'Website', 'Response'",
							"    );",
							"});",
							"",
							"",
							"pm.test(\"Ratings array should have at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.Ratings).to.be.an('array').that.is.not.empty;",
							"});",
							"",
							"",
							"pm.test(\"ImdbRating is a valid number\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.imdbRating).to.exist;",
							"    pm.expect(responseData.imdbRating).to.be.a('number');",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Forrest Gump\",\r\n    \"year\": \"1994\",\r\n    \"genre\": \"drama\",\r\n    \r\n}"
				},
				"url": {
					"raw": "http://www.omdbapi.com/?apikey=d0236222&i=tt0109830",
					"protocol": "http",
					"host": [
						"www",
						"omdbapi",
						"com"
					],
					"path": [
						""
					],
					"query": [
						{
							"key": "apikey",
							"value": "d0236222"
						},
						{
							"key": "i",
							"value": "tt0109830"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Find new movie",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Fixed syntax error by removing extra comma and adding missing double quote",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test( \"Title\", \"Year\", \"Runtime\", \"Genre\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    const requiredFields = [",
							"        \"Title\", \"Year\", \"Runtime\", \"Genre\",  // Fixed syntax error",
							"    ];",
							"",
							"    requiredFields.forEach(field => {",
							"        pm.expect(responseData).to.have.property(field);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Ratings array is present and not empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.Ratings).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1, \"Ratings array should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"ImdbRating is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.imdbRating).to.match(/^\\d+(\\.\\d+)?$/, \"ImdbRating should be a number in a valid format\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://www.omdbapi.com/?apikey=d0236222&i=tt0109830",
					"protocol": "http",
					"host": [
						"www",
						"omdbapi",
						"com"
					],
					"path": [
						""
					],
					"query": [
						{
							"key": "apikey",
							"value": "d0236222"
						},
						{
							"key": "i",
							"value": "tt0109830"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "poster",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is image/jpeg\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"image/jpeg\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body is not null\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.equal(null);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the response body matches the expected image schema\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"image/jpeg\");\r",
							"    pm.expect(pm.response.text()).to.equal(null);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "apikey",
							"value": "d0236222",
							"type": "text"
						},
						{
							"key": "i",
							"value": "tt0109830",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://img.omdbapi.com/?apikey=d0236222&i=tt0109830",
					"protocol": "http",
					"host": [
						"img",
						"omdbapi",
						"com"
					],
					"path": [
						""
					],
					"query": [
						{
							"key": "apikey",
							"value": "d0236222"
						},
						{
							"key": "i",
							"value": "tt0109830"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "FakeMovie",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 401\", function () {",
							"  pm.expect(pm.response.code).to.equal(401);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('Response');",
							"    pm.expect(responseData).to.have.property('Error');",
							"});",
							"",
							"",
							"pm.test(\"Response field is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.Response).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Error field is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.Error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error should not be empty\");",
							"});",
							"",
							"pm.test(\"Response time is within an acceptable range\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Ensure that the response Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Validate the schema of the response body\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData).to.have.property('Response');",
							"  pm.expect(responseData).to.have.property('Error');",
							"});",
							"",
							"",
							"pm.test(\"Ensure that 'Response' and 'Error' fields are present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.Response).to.exist;",
							"    pm.expect(responseData.Error).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Response and Error fields are of type string and non-empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.Response).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"    pm.expect(responseData.Error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://www.omdbapi.com/?apikey=d0236222&t=FakeMovie111",
					"protocol": "http",
					"host": [
						"www",
						"omdbapi",
						"com"
					],
					"path": [
						""
					],
					"query": [
						{
							"key": "apikey",
							"value": "d0236222"
						},
						{
							"key": "t",
							"value": "FakeMovie111"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "poster",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 405\", function () {",
							"  pm.expect(pm.response.code).to.equal(405);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is text/html\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");",
							"});",
							"",
							"",
							"pm.test(\"Response body is empty\", function () {",
							"    pm.expect(pm.response.text()).to.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Verify that the API key is included in the request\", function () {",
							"    const requestUrl = pm.request.url;",
							"    ",
							"    pm.expect(requestUrl).to.include(\"apikey=d0236222\");",
							"});",
							"",
							"",
							"pm.test(\"Ensure that the request method is DELETE\", function () {",
							"    pm.expect(pm.request.method).to.equal('DELETE');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://img.omdbapi.com/?apikey=d0236222&i=tt0109830",
					"protocol": "http",
					"host": [
						"img",
						"omdbapi",
						"com"
					],
					"path": [
						""
					],
					"query": [
						{
							"key": "apikey",
							"value": "d0236222"
						},
						{
							"key": "i",
							"value": "tt0109830"
						}
					]
				}
			},
			"response": []
		}
	]
}